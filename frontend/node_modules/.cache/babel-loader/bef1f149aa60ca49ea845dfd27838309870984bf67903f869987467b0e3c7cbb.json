{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kishore\\\\form-builder\\\\frontend\\\\src\\\\components\\\\ComprehensionForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ComprehensionForm = ({\n  addQuestion\n}) => {\n  _s();\n  const [question, setQuestion] = useState('');\n  const [options, setOptions] = useState([]);\n  const handleAddOption = option => {\n    setOptions([...options, option]); // Add options to the comprehension question\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Comprehension Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: question,\n      onChange: e => setQuestion(e.target.value),\n      placeholder: \"Enter comprehension paragraph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleAddOption('New Option'),\n      children: \"Add Option\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: option\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n_s(ComprehensionForm, \"M09huLARLPAHlLYUjga4fuFtBrk=\");\n_c = ComprehensionForm;\nexport default ComprehensionForm;\nvar _c;\n$RefreshReg$(_c, \"ComprehensionForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ComprehensionForm","addQuestion","_s","question","setQuestion","options","setOptions","handleAddOption","option","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","map","index","_c","$RefreshReg$"],"sources":["C:/Users/kishore/form-builder/frontend/src/components/ComprehensionForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst ComprehensionForm = ({ addQuestion }) => {\r\n  const [question, setQuestion] = useState('');\r\n  const [options, setOptions] = useState([]);\r\n\r\n  const handleAddOption = (option) => {\r\n    setOptions([...options, option]);  // Add options to the comprehension question\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Comprehension Question</h3>\r\n      <textarea\r\n        value={question}\r\n        onChange={(e) => setQuestion(e.target.value)}\r\n        placeholder=\"Enter comprehension paragraph\"\r\n      />\r\n      <button onClick={() => handleAddOption('New Option')}>Add Option</button>\r\n      {options.map((option, index) => (\r\n        <div key={index}>{option}</div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComprehensionForm;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMU,eAAe,GAAIC,MAAM,IAAK;IAClCF,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAEG,MAAM,CAAC,CAAC,CAAC,CAAE;EACrC,CAAC;EAED,oBACET,OAAA;IAAAU,QAAA,gBACEV,OAAA;MAAAU,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/Bd,OAAA;MACEe,KAAK,EAAEX,QAAS;MAChBY,QAAQ,EAAGC,CAAC,IAAKZ,WAAW,CAACY,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC7CI,WAAW,EAAC;IAA+B;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,eACFd,OAAA;MAAQoB,OAAO,EAAEA,CAAA,KAAMZ,eAAe,CAAC,YAAY,CAAE;MAAAE,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACxER,OAAO,CAACe,GAAG,CAAC,CAACZ,MAAM,EAAEa,KAAK,kBACzBtB,OAAA;MAAAU,QAAA,EAAkBD;IAAM,GAAda,KAAK;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAC/B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACX,EAAA,CAtBIF,iBAAiB;AAAAsB,EAAA,GAAjBtB,iBAAiB;AAwBvB,eAAeA,iBAAiB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}